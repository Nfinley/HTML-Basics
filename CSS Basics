
/* CSS BASICS
This file contains basics of CSS (Cascading Style Sheets) learned through Codecademy
In order to to link HTML file to CSS sheet you must create a link within the HTML file to the CSS file
The 'link'has three parts, 'type' that should always be equal to 'text/css', 'rel' attribute that should be equal to 'stylesheet' 
and 'href' that should link to your css file, see below */
  <link type="text/css" rel="stylesheet" href="CSS file address"/> The link tag is also self closing just like the img tag

/* CSS SYNTAX */

Basic syntax is as follows: 

selector {
    property: value;
}

<!-- The 'selector' can be any html element such as <p>, <img> or <table> 
The 'property'is an aspect of 'selector', you can change things like 'font-family', 'color' and 'font-size'
The 'value' is a possible setting for a 'property', ie: the 'font' can be blue, red or black and the 'font-family' 
can be arial, etc. Each property value must end with  ';'-->


/* This is the format for a CSS comment */

/* Color types: Hexadecimal, Pixels, and EMs

/* Hexadecimal colors are six digits and can be digits from 0 to 9 and letters a to f. 

Ems: The font-size unit em is a relative measure: one em is equal to the default font size on whatever screen the user is using.
1em is the normal font size and 2em is twice the size. 

*/

/* Links and TEXT DECORATION
Within CSS stylesheet you can decorate links, ie: 
text-decoration: none (this removes the underline standard on a hyperlink) 

To add CSS styling to every element you can use * as a selector 

In order to style an element directly inside another element or their direct children you can do this: 
div > p { /* Some CSS */ }
*/


/* IDs and CLASSES within CSS 

CLASS: 
CLASSes are great when you have a group of elements that need the same styling
Within HTML it looks like <div class="header"></div>
To identify a CLASS in the CCS stylesheet you use a (.) 
For example: 
.header {
  height: 100px;
  width: 50px;
  }
  
  ID:
  IDs on the other hand are great when you have exactly one element that needs styling
  They are assigned in HTML like this: <div id="header"></div>
  ID's are identified in the CSS stylesheet with a pound sign (#).
  For example: 
  #header {
    height: 100px;
  }
  Applies to a single instance instead of an entire class
  */
  
  /* Pseudo Class Selectors
  Allows you to access HTML elements that are not part of the document tree, like changing a link when you hover over it
  It's the colon after the selector that makes it a pseudo selector. See below:
  selector:pseudo-class_selector {
    property: value;
} 
For example: 

a:hover {
  color: red;
  font-weight: bold;
}
Here are some useful pseudo selectors: 
a:link: An unvisited link.
a:visited: A visited link.
a:hover: A link you're hovering your mouse over.
p:first-child {
    color: red;
} This makes the first child red. 
:nth-child(#) : Allows you to style any child in the html
*/

div {
	display: inline-block;
	margin-left: 5px;
	
}

/* CSS POSITIONING 
The DISPLAY property has four values: block, inline, inline-block and none. 

block= Makes the element a block box and won't let anything sit next to it, takes up entire width of page. 

inline-block= Makes the element a block box and will let other elements to sit next to it

inline= Makes the element sit on the same line as another element, but without formatting it like a block. 
It only takes up as much width as it needs (not the whole line). They don't keep dimensions. The inline display 
value is better suited for HTML elements that are blocks by default, such as headers and paragraphs.

none= Makes the element and its content disappear
*/

/* MARGINS, BORDERS, and PADDING
Margin = The space around the element, you can adjust to make elements closer to or farther away from eachother
  Example settings: 
    margin: auto: This automatically puts equal left and right margin on the element.
  Margin be set in two ways. Using the below example:
    margin-top: /*some value*/
    margin-right: /*some value*/
    margin-bottom: /*some value*/
    margin-left: /*some-value*/
  Or you can list the pixels clockwise starting at the top like this: margin: 150px 10px 20px 5px 
    
Border= The edge of the element
Padding= The space between the content and the border. Can be set using the same two ways as mentioned above for margin. 
*/

/*FLOATS 
The float property is used to determine where on the page an element goes and how it fits into the flow of the page. 
float: left;
float:right;
Sometimes when using the float function elements can get on top of each other. You can use the 'clear' property to change
this. It moves below any elements to left or right or both depending on which value is assigned:
element {
    clear: /*right, left, or both*/
}
*/

/* ABSOLUTE, RELATIVE and FIXED POSITIONING
position: absolute is positioned in relation to the first parent that doesn't have position:static. If no parent exists the 
element with position:absolute gets positioned relative to the <html>

position: relative is more straightforward than position:absolute. It is positioned relative to where it would have landed
if it had the property of position:static.

position:fixed anchors and element to the browser window. It in affect glues it to the page. If you scroll 
this element stays put as others elements scroll.

z-index property determines the stack level of the an HTML element. Will only worked if applied to a positioned element


